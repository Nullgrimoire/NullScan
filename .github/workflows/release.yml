name: Release Binaries

on:
    release:
        types: [published]
    push:
        tags: ['v*']

env:
    CARGO_TERM_COLOR: always
    RUST_BACKTRACE: 1

jobs:
    build-release:
        name: Build Release Binaries
        runs-on: ${{ matrix.os }}
        strategy:
            fail-fast: false
            matrix:
                include:
                    # Linux targets
                    - os: ubuntu-latest
                      target: x86_64-unknown-linux-gnu
                      binary_name: nullscan
                      archive_name: nullscan-linux-amd64
                      strip: true
                    - os: ubuntu-latest
                      target: x86_64-unknown-linux-musl
                      binary_name: nullscan
                      archive_name: nullscan-linux-musl-amd64
                      strip: true
                    - os: ubuntu-latest
                      target: aarch64-unknown-linux-gnu
                      binary_name: nullscan
                      archive_name: nullscan-linux-arm64
                      strip: true

                    # Windows targets
                    - os: windows-latest
                      target: x86_64-pc-windows-msvc
                      binary_name: nullscan.exe
                      archive_name: nullscan-windows-amd64
                      strip: false
                    - os: windows-latest
                      target: i686-pc-windows-msvc
                      binary_name: nullscan.exe
                      archive_name: nullscan-windows-i386
                      strip: false

                    # macOS targets
                    - os: macos-latest
                      target: x86_64-apple-darwin
                      binary_name: nullscan
                      archive_name: nullscan-macos-amd64
                      strip: true
                    - os: macos-latest
                      target: aarch64-apple-darwin
                      binary_name: nullscan
                      archive_name: nullscan-macos-arm64
                      strip: true

        steps:
            - name: 📂 Checkout code
              uses: actions/checkout@v4

            - name: 🦀 Setup Rust toolchain
              uses: dtolnay/rust-toolchain@stable
              with:
                  targets: ${{ matrix.target }}

            - name: 🔧 Install cross-compilation tools (Linux ARM64)
              if: matrix.target == 'aarch64-unknown-linux-gnu'
              run: |
                  sudo apt-get update
                  sudo apt-get install -y gcc-aarch64-linux-gnu

            - name: 🔧 Install musl tools (Linux musl)
              if: matrix.target == 'x86_64-unknown-linux-musl'
              run: |
                  sudo apt-get update
                  sudo apt-get install -y musl-tools

            - name: 📦 Cache dependencies
              uses: Swatinem/rust-cache@v2
              with:
                  key: ${{ matrix.target }}

            - name: 🔨 Build release binary
              run: cargo build --release --target ${{ matrix.target }}
              env:
                  # Cross-compilation environment variables
                  CARGO_TARGET_AARCH64_UNKNOWN_LINUX_GNU_LINKER: aarch64-linux-gnu-gcc
                  CC_aarch64_unknown_linux_gnu: aarch64-linux-gnu-gcc
                  CXX_aarch64_unknown_linux_gnu: aarch64-linux-gnu-g++

            - name: 🗜️ Strip binary (Unix)
              if: matrix.strip
              run: |
                  if [ "${{ matrix.target }}" = "aarch64-unknown-linux-gnu" ]; then
                    aarch64-linux-gnu-strip target/${{ matrix.target }}/release/${{ matrix.binary_name }}
                  else
                    strip target/${{ matrix.target }}/release/${{ matrix.binary_name }}
                  fi

            - name: 📁 Create release directory
              run: mkdir -p release-assets

            - name: 📦 Package binary (Unix)
              if: matrix.os != 'windows-latest'
              run: |
                  cd target/${{ matrix.target }}/release
                  tar -czf ../../../release-assets/${{ matrix.archive_name }}.tar.gz ${{ matrix.binary_name }}
                  cd ../../../

            - name: 📦 Package binary (Windows)
              if: matrix.os == 'windows-latest'
              run: |
                  cd target/${{ matrix.target }}/release
                  7z a ../../../release-assets/${{ matrix.archive_name }}.zip ${{ matrix.binary_name }}
                  cd ../../../

            - name: 🔍 Generate checksums
              run: |
                  cd release-assets
                  if [ "${{ matrix.os }}" == "windows-latest" ]; then
                    sha256sum ${{ matrix.archive_name }}.zip > ${{ matrix.archive_name }}.zip.sha256
                  else
                    sha256sum ${{ matrix.archive_name }}.tar.gz > ${{ matrix.archive_name }}.tar.gz.sha256
                  fi
              shell: bash

            - name: 📤 Upload release assets
              uses: actions/upload-artifact@v4
              with:
                  name: ${{ matrix.archive_name }}
                  path: release-assets/

    create-release:
        name: Create GitHub Release
        runs-on: ubuntu-latest
        needs: build-release
        if: github.event_name == 'release' || startsWith(github.ref, 'refs/tags/')
        steps:
            - name: 📂 Checkout code
              uses: actions/checkout@v4

            - name: 📥 Download all artifacts
              uses: actions/download-artifact@v4
              with:
                  path: release-assets/

            - name: 📋 Organize release assets
              run: |
                  mkdir -p final-assets
                  find release-assets -name "*.tar.gz" -o -name "*.zip" -o -name "*.sha256" | while read file; do
                    cp "$file" final-assets/
                  done
                  ls -la final-assets/

            - name: 📝 Generate release notes
              id: release_notes
              run: |
                  cat > release_notes.md << 'EOF'
                  ## 🔍 NullScan Release

                  Fast, cross-platform TCP port scanner with service detection and vulnerability assessment.

                  ### 📦 Downloads

                  Choose the appropriate binary for your platform:

                  **🐧 Linux:**
                  - `nullscan-linux-amd64.tar.gz` - Linux x86_64 (most common)
                  - `nullscan-linux-musl-amd64.tar.gz` - Linux x86_64 (static binary, no dependencies)
                  - `nullscan-linux-arm64.tar.gz` - Linux ARM64 (Raspberry Pi 4, ARM servers)

                  **🪟 Windows:**
                  - `nullscan-windows-amd64.zip` - Windows x86_64 (most common)
                  - `nullscan-windows-i386.zip` - Windows 32-bit (legacy systems)

                  **🍎 macOS:**
                  - `nullscan-macos-amd64.tar.gz` - macOS Intel (x86_64)
                  - `nullscan-macos-arm64.tar.gz` - macOS Apple Silicon (M1/M2/M3)

                  ### 🚀 Quick Start

                  **Linux/macOS:**
                  ```bash
                  # Download and extract
                  tar -xzf nullscan-*.tar.gz

                  # Make executable and run
                  chmod +x nullscan
                  ./nullscan --target example.com --top100
                  ```

                  **Windows:**
                  ```cmd
                  # Extract the ZIP file
                  # Open Command Prompt or PowerShell in the extracted folder
                  nullscan.exe --target example.com --top100
                  ```

                  ### 🛡️ One-Line Install

                  **Linux/macOS:**
                  ```bash
                  curl -sSL https://raw.githubusercontent.com/Nullgrimoire/NullScan/master/scripts/install.sh | bash
                  ```

                  **Windows PowerShell:**
                  ```powershell
                  iwr -useb https://raw.githubusercontent.com/Nullgrimoire/NullScan/master/scripts/install.ps1 | iex
                  ```

                  ### 🔐 Verification

                  All binaries include SHA256 checksums for verification:
                  ```bash
                  # Linux/macOS
                  sha256sum -c nullscan-*.sha256

                  # Windows
                  certutil -hashfile nullscan-*.zip SHA256
                  ```

                  ### 📚 Documentation

                  - [Getting Started Guide](https://github.com/Nullgrimoire/NullScan#-quick-start)
                  - [Full Documentation](https://github.com/Nullgrimoire/NullScan#readme)
                  - [Examples](https://github.com/Nullgrimoire/NullScan/tree/master/examples)

                  ### 🐛 Issues & Support

                  Report issues at: https://github.com/Nullgrimoire/NullScan/issues
                  EOF

            - name: 🚀 Upload to release
              uses: softprops/action-gh-release@v1
              with:
                  files: final-assets/*
                  body_path: release_notes.md
                  draft: false
                  prerelease: false
                  fail_on_unmatched_files: true
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    create-install-scripts:
        name: Create Installation Scripts
        runs-on: ubuntu-latest
        needs: build-release
        if: github.event_name == 'release' || startsWith(github.ref, 'refs/tags/')
        steps:
            - name: 📂 Checkout code
              uses: actions/checkout@v4

            - name: 📁 Create scripts directory
              run: mkdir -p scripts

            - name: 🐧 Create Unix installation script
              run: |
                  cat > scripts/install.sh << 'EOF'
                  #!/bin/bash
                  # NullScan Installation Script for Linux/macOS

                  set -e

                  # Colors for output
                  RED='\033[0;31m'
                  GREEN='\033[0;32m'
                  YELLOW='\033[1;33m'
                  BLUE='\033[0;34m'
                  NC='\033[0m' # No Color

                  # GitHub repository
                  REPO="Nullgrimoire/NullScan"
                  INSTALL_DIR="/usr/local/bin"

                  echo -e "${BLUE}🔍 NullScan Installation Script${NC}"
                  echo -e "${BLUE}=================================${NC}"

                  # Detect OS and architecture
                  OS=$(uname -s | tr '[:upper:]' '[:lower:]')
                  ARCH=$(uname -m)

                  case $OS in
                      linux*)
                          OS_NAME="linux"
                          EXTENSION=".tar.gz"
                          ;;
                      darwin*)
                          OS_NAME="macos"
                          EXTENSION=".tar.gz"
                          ;;
                      *)
                          echo -e "${RED}❌ Error: Unsupported OS: $OS${NC}"
                          echo -e "${YELLOW}💡 Supported: Linux, macOS${NC}"
                          exit 1
                          ;;
                  esac

                  case $ARCH in
                      x86_64|amd64)
                          ARCH_NAME="amd64"
                          ;;
                      aarch64|arm64)
                          ARCH_NAME="arm64"
                          ;;
                      *)
                          echo -e "${RED}❌ Error: Unsupported architecture: $ARCH${NC}"
                          echo -e "${YELLOW}💡 Supported: x86_64/amd64, aarch64/arm64${NC}"
                          exit 1
                          ;;
                  esac

                  # Use musl for Linux if available (better compatibility)
                  if [ "$OS_NAME" = "linux" ] && [ "$ARCH_NAME" = "amd64" ]; then
                      BINARY_NAME="nullscan-linux-musl-amd64"
                  else
                      BINARY_NAME="nullscan-${OS_NAME}-${ARCH_NAME}"
                  fi

                  echo -e "${YELLOW}🖥️  Detected OS: $OS_NAME${NC}"
                  echo -e "${YELLOW}⚙️  Detected Architecture: $ARCH_NAME${NC}"
                  echo -e "${YELLOW}📦 Binary: $BINARY_NAME${NC}"
                  echo ""

                  # Get latest release
                  echo -e "${YELLOW}🔍 Getting latest release...${NC}"
                  DOWNLOAD_URL="https://github.com/${REPO}/releases/latest/download/${BINARY_NAME}${EXTENSION}"

                  # Create temporary directory
                  TMP_DIR=$(mktemp -d)
                  cd "$TMP_DIR"

                  # Download binary
                  echo -e "${YELLOW}📥 Downloading NullScan...${NC}"
                  if command -v curl &> /dev/null; then
                      curl -fsSL "$DOWNLOAD_URL" -o "${BINARY_NAME}${EXTENSION}"
                  elif command -v wget &> /dev/null; then
                      wget -q "$DOWNLOAD_URL" -O "${BINARY_NAME}${EXTENSION}"
                  else
                      echo -e "${RED}❌ Error: Neither curl nor wget found${NC}"
                      echo -e "${YELLOW}💡 Please install curl or wget first${NC}"
                      exit 1
                  fi

                  # Extract binary
                  echo -e "${YELLOW}📦 Extracting binary...${NC}"
                  tar -xzf "${BINARY_NAME}${EXTENSION}"
                  chmod +x nullscan

                  # Install to system
                  echo -e "${YELLOW}⚙️  Installing to $INSTALL_DIR...${NC}"
                  if [ -w "$INSTALL_DIR" ]; then
                      cp nullscan "$INSTALL_DIR/"
                  else
                      echo -e "${YELLOW}🔐 Installing to $INSTALL_DIR requires sudo...${NC}"
                      sudo cp nullscan "$INSTALL_DIR/"
                  fi

                  # Cleanup
                  cd /
                  rm -rf "$TMP_DIR"

                  # Verify installation
                  if command -v nullscan &> /dev/null; then
                      echo -e "${GREEN}✅ NullScan installed successfully!${NC}"
                      echo -e "${GREEN}📍 Location: $(which nullscan)${NC}"
                      echo -e "${GREEN}🏷️  Version: $(nullscan --version)${NC}"
                      echo ""
                      echo -e "${BLUE}🚀 Quick Start:${NC}"
                      echo -e "${YELLOW}   nullscan --target example.com --top100${NC}"
                      echo -e "${YELLOW}   nullscan --help${NC}"
                  else
                      echo -e "${RED}❌ Installation failed${NC}"
                      exit 1
                  fi
                  EOF

                  chmod +x scripts/install.sh

            - name: 🪟 Create Windows installation script
              run: |
                  cat > scripts/install.ps1 << 'EOF'
                  # NullScan Windows Installation Script

                  param(
                      [string]$InstallPath = "$env:LOCALAPPDATA\NullScan",
                      [switch]$AddToPath = $true,
                      [switch]$Force = $false
                  )

                  $ErrorActionPreference = "Stop"

                  # Colors for output
                  function Write-ColoredOutput {
                      param(
                          [string]$Message,
                          [System.ConsoleColor]$ForegroundColor = [System.ConsoleColor]::White
                      )
                      $originalColor = $Host.UI.RawUI.ForegroundColor
                      $Host.UI.RawUI.ForegroundColor = $ForegroundColor
                      Write-Output $Message
                      $Host.UI.RawUI.ForegroundColor = $originalColor
                  }

                  # GitHub repository
                  $Repo = "Nullgrimoire/NullScan"

                  Write-ColoredOutput "🔍 NullScan Windows Installation Script" -ForegroundColor Cyan
                  Write-ColoredOutput "=======================================" -ForegroundColor Cyan

                  # Detect architecture
                  $Is64Bit = [System.Environment]::Is64BitOperatingSystem
                  $Arch = if ($Is64Bit) { "amd64" } else { "i386" }
                  $BinaryName = "nullscan-windows-$Arch"

                  Write-ColoredOutput "🖥️  Detected OS: Windows" -ForegroundColor Yellow
                  Write-ColoredOutput "⚙️  Detected Architecture: $Arch" -ForegroundColor Yellow
                  Write-ColoredOutput "📦 Binary: $BinaryName" -ForegroundColor Yellow
                  Write-ColoredOutput "📍 Install Path: $InstallPath" -ForegroundColor Yellow
                  Write-Output ""

                  # Check if already installed
                  if ((Test-Path "$InstallPath\nullscan.exe") -and -not $Force) {
                      Write-ColoredOutput "⚠️  NullScan is already installed at $InstallPath" -ForegroundColor Yellow
                      Write-ColoredOutput "💡 Use -Force to reinstall" -ForegroundColor Yellow
                      exit 0
                  }

                  # Construct download URL
                  $DownloadUrl = "https://github.com/$Repo/releases/latest/download/$BinaryName.zip"

                  # Create installation directory
                  Write-ColoredOutput "📁 Creating installation directory..." -ForegroundColor Yellow
                  if (-not (Test-Path $InstallPath)) {
                      New-Item -ItemType Directory -Path $InstallPath -Force | Out-Null
                  }

                  # Download and extract
                  $TempZip = "$env:TEMP\nullscan-$([System.Guid]::NewGuid().ToString()).zip"
                  Write-ColoredOutput "📥 Downloading NullScan..." -ForegroundColor Yellow

                  try {
                      $ProgressPreference = 'SilentlyContinue'
                      Invoke-WebRequest -Uri $DownloadUrl -OutFile $TempZip -UseBasicParsing

                      Write-ColoredOutput "📦 Extracting binary..." -ForegroundColor Yellow
                      Expand-Archive -Path $TempZip -DestinationPath $InstallPath -Force
                      Remove-Item $TempZip -Force
                  }
                  catch {
                      Write-ColoredOutput "❌ Error downloading NullScan: $_" -ForegroundColor Red
                      if (Test-Path $TempZip) { Remove-Item $TempZip -Force }
                      exit 1
                  }

                  # Add to PATH if requested
                  if ($AddToPath) {
                      $CurrentPath = [Environment]::GetEnvironmentVariable("PATH", "User")
                      if ($CurrentPath -notlike "*$InstallPath*") {
                          Write-ColoredOutput "🔗 Adding NullScan to PATH..." -ForegroundColor Yellow
                          [Environment]::SetEnvironmentVariable("PATH", "$CurrentPath;$InstallPath", "User")
                          Write-ColoredOutput "✅ Added to PATH (restart terminal to take effect)" -ForegroundColor Green
                      }
                  }

                  # Verify installation
                  if (Test-Path "$InstallPath\nullscan.exe") {
                      Write-ColoredOutput "✅ NullScan installed successfully!" -ForegroundColor Green
                      Write-ColoredOutput "📍 Location: $InstallPath\nullscan.exe" -ForegroundColor Green

                      # Try to get version
                      try {
                          $Version = & "$InstallPath\nullscan.exe" --version 2>$null
                          Write-ColoredOutput "🏷️  Version: $Version" -ForegroundColor Green
                      }
                      catch {
                          Write-ColoredOutput "🏷️  Binary installed (version check failed)" -ForegroundColor Green
                      }

                      Write-Output ""
                      Write-ColoredOutput "🚀 Quick Start:" -ForegroundColor Cyan
                      if ($AddToPath) {
                          Write-ColoredOutput "   nullscan --target example.com --top100" -ForegroundColor Yellow
                          Write-ColoredOutput "   nullscan --help" -ForegroundColor Yellow
                          Write-Output ""
                          Write-ColoredOutput "💡 Note: Restart your terminal/PowerShell to use 'nullscan' command" -ForegroundColor Yellow
                      } else {
                          Write-ColoredOutput "   & `"$InstallPath\nullscan.exe`" --target example.com --top100" -ForegroundColor Yellow
                          Write-ColoredOutput "   & `"$InstallPath\nullscan.exe`" --help" -ForegroundColor Yellow
                      }
                  }
                  else {
                      Write-ColoredOutput "❌ Installation failed" -ForegroundColor Red
                      exit 1
                  }
                  EOF

            - name: 📤 Upload installation scripts
              uses: actions/upload-artifact@v4
              with:
                  name: install-scripts
                  path: scripts/

            - name: 🚀 Add scripts to release
              uses: softprops/action-gh-release@v1
              with:
                  files: scripts/*
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
