name: Release

on:
    push:
        tags:
            - 'v*.*.*'

env:
    CARGO_TERM_COLOR: always

jobs:
    create-release:
        name: Create Release
        runs-on: ubuntu-latest
        outputs:
            upload_url: ${{ steps.create_release.outputs.upload_url }}
        steps:
            - name: Create Release
              id: create_release
              uses: actions/create-release@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  tag_name: ${{ github.ref }}
                  release_name: NullScan ${{ github.ref }}
                  draft: false
                  prerelease: false

    build:
        name: Build
        needs: create-release
        runs-on: ${{ matrix.os }}
        strategy:
            matrix:
                include:
                    - os: ubuntu-latest
                      target: x86_64-unknown-linux-gnu
                      binary_name: nullscan
                      asset_name: nullscan-linux-x86_64
                    - os: ubuntu-latest
                      target: x86_64-unknown-linux-musl
                      binary_name: nullscan
                      asset_name: nullscan-linux-x86_64-musl
                    - os: windows-latest
                      target: x86_64-pc-windows-msvc
                      binary_name: nullscan.exe
                      asset_name: nullscan-windows-x86_64.exe
                    - os: macos-latest
                      target: x86_64-apple-darwin
                      binary_name: nullscan
                      asset_name: nullscan-macos-x86_64
                    - os: macos-latest
                      target: aarch64-apple-darwin
                      binary_name: nullscan
                      asset_name: nullscan-macos-aarch64

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup Rust
              uses: dtolnay/rust-toolchain@stable
              with:
                  targets: ${{ matrix.target }}

            - name: Install musl tools (Linux musl only)
              if: matrix.target == 'x86_64-unknown-linux-musl'
              run: |
                  sudo apt-get update
                  sudo apt-get install -y musl-tools

            - name: Cache dependencies
              uses: Swatinem/rust-cache@v2
              with:
                  key: ${{ matrix.target }}

            - name: Build release binary
              run: cargo build --release --target ${{ matrix.target }}

            - name: Strip binary (Unix only)
              if: matrix.os != 'windows-latest'
              run: strip target/${{ matrix.target }}/release/${{ matrix.binary_name }}

            - name: Generate checksums
              shell: bash
              run: |
                  if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
                    cd target/${{ matrix.target }}/release
                    certutil -hashfile ${{ matrix.binary_name }} SHA256 > ${{ matrix.asset_name }}.sha256
                    # Convert Windows certutil output to standard format
                    powershell -Command "(Get-Content '${{ matrix.asset_name }}.sha256')[1] + '  ${{ matrix.binary_name }}'" > ${{ matrix.asset_name }}.sha256.tmp
                    mv ${{ matrix.asset_name }}.sha256.tmp ${{ matrix.asset_name }}.sha256
                  else
                    cd target/${{ matrix.target }}/release
                    shasum -a 256 ${{ matrix.binary_name }} > ${{ matrix.asset_name }}.sha256
                  fi

            - name: Upload Release Asset
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ needs.create-release.outputs.upload_url }}
                  asset_path: target/${{ matrix.target }}/release/${{ matrix.binary_name }}
                  asset_name: ${{ matrix.asset_name }}
                  asset_content_type: application/octet-stream

            - name: Upload Checksum
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ needs.create-release.outputs.upload_url }}
                  asset_path: target/${{ matrix.target }}/release/${{ matrix.asset_name }}.sha256
                  asset_name: ${{ matrix.asset_name }}.sha256
                  asset_content_type: text/plain
