name: CI/CD Pipeline

on:
    push:
        branches: [main, master, develop]
        tags: ['v*']
    pull_request:
        branches: [main, master]

env:
    CARGO_TERM_COLOR: always
    RUST_BACKTRACE: 1

jobs:
    # 🔍 Code Quality and Testing
    test:
        name: Test Suite
        runs-on: ${{ matrix.os }}
        strategy:
            fail-fast: false
            matrix:
                os: [ubuntu-latest, windows-latest, macos-latest]
                rust: [stable, beta]
                include:
                    - os: ubuntu-latest
                      target: x86_64-unknown-linux-gnu
                    - os: windows-latest
                      target: x86_64-pc-windows-msvc
                    - os: macos-latest
                      target: x86_64-apple-darwin

        steps:
            - name: 📂 Checkout code
              uses: actions/checkout@v4

            - name: 🦀 Setup Rust toolchain
              uses: dtolnay/rust-toolchain@stable
              with:
                  toolchain: ${{ matrix.rust }}
                  target: ${{ matrix.target }}
                  components: rustfmt, clippy

            - name: 📦 Cache dependencies
              uses: Swatinem/rust-cache@v2
              with:
                  key: ${{ matrix.os }}-${{ matrix.rust }}

            - name: 🔍 Check formatting
              run: cargo fmt --all -- --check

            - name: 📋 Lint with Clippy
              run: cargo clippy --all-targets --all-features -- -D warnings

            - name: 🏗️ Build debug
              run: cargo build --verbose

            - name: 🧪 Run tests
              run: cargo test --verbose

            - name: 🏗️ Build release
              run: cargo build --release --verbose

            - name: 🔬 Integration test (Unix)
              if: runner.os != 'Windows'
              run: |
                  ./target/release/nullscan --target 127.0.0.1 --ports 80 --timeout 1000 || true
                  ./target/release/nullscan --help

            - name: 🔬 Integration test (Windows)
              if: runner.os == 'Windows'
              run: |
                  .\target\release\nullscan.exe --target 127.0.0.1 --ports 80 --timeout 1000
                  .\target\release\nullscan.exe --help
              continue-on-error: true

    # 🛡️ Security Audit
    security:
        name: Security Audit
        runs-on: ubuntu-latest
        steps:
            - name: 📂 Checkout code
              uses: actions/checkout@v4

            - name: 🦀 Setup Rust
              uses: dtolnay/rust-toolchain@stable

            - name: 📦 Cache dependencies
              uses: Swatinem/rust-cache@v2

            - name: 🛡️ Install cargo-audit
              run: cargo install cargo-audit

            - name: 🔍 Run security audit
              run: cargo audit

    # 📊 Code Coverage
    coverage:
        name: Code Coverage
        runs-on: ubuntu-latest
        steps:
            - name: 📂 Checkout code
              uses: actions/checkout@v4

            - name: 🦀 Setup Rust
              uses: dtolnay/rust-toolchain@stable
              with:
                  components: llvm-tools-preview

            - name: 📦 Cache dependencies
              uses: Swatinem/rust-cache@v2

            - name: 📊 Install cargo-llvm-cov
              run: cargo install cargo-llvm-cov

            - name: 🧪 Generate coverage report
              run: cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info

            - name: 📤 Upload coverage to Codecov
              uses: codecov/codecov-action@v3
              with:
                  files: lcov.info
                  fail_ci_if_error: false

    # 📦 Build Release Binaries
    build:
        name: Build Release Binaries
        runs-on: ${{ matrix.os }}
        needs: [test, security]
        if: startsWith(github.ref, 'refs/tags/v')
        strategy:
            matrix:
                include:
                    - os: ubuntu-latest
                      target: x86_64-unknown-linux-gnu
                      artifact_name: nullscan
                      asset_name: nullscan-linux-x86_64
                    - os: ubuntu-latest
                      target: x86_64-unknown-linux-musl
                      artifact_name: nullscan
                      asset_name: nullscan-linux-x86_64-musl
                    - os: windows-latest
                      target: x86_64-pc-windows-msvc
                      artifact_name: nullscan.exe
                      asset_name: nullscan-windows-x86_64.exe
                    - os: macos-latest
                      target: x86_64-apple-darwin
                      artifact_name: nullscan
                      asset_name: nullscan-macos-x86_64
                    - os: macos-latest
                      target: aarch64-apple-darwin
                      artifact_name: nullscan
                      asset_name: nullscan-macos-aarch64

        steps:
            - name: 📂 Checkout code
              uses: actions/checkout@v4

            - name: 🦀 Setup Rust
              uses: dtolnay/rust-toolchain@stable
              with:
                  target: ${{ matrix.target }}

            - name: 📦 Cache dependencies
              uses: Swatinem/rust-cache@v2

            - name: 🔧 Install musl tools (Linux musl)
              if: matrix.target == 'x86_64-unknown-linux-musl'
              run: sudo apt-get update && sudo apt-get install -y musl-tools

            - name: 🏗️ Build release binary
              run: cargo build --release --target ${{ matrix.target }}

            - name: 📦 Strip binary (Unix)
              if: runner.os != 'Windows'
              run: strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

            - name: 📤 Upload binary artifact
              uses: actions/upload-artifact@v3
              with:
                  name: ${{ matrix.asset_name }}
                  path: target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

    # 🚀 Create GitHub Release
    release:
        name: Create Release
        runs-on: ubuntu-latest
        needs: [build]
        if: startsWith(github.ref, 'refs/tags/v')
        steps:
            - name: 📂 Checkout code
              uses: actions/checkout@v4

            - name: 📥 Download all artifacts
              uses: actions/download-artifact@v3

            - name: 📋 Generate changelog
              id: changelog
              run: |
                  echo "## 🚀 What's New" > RELEASE_NOTES.md
                  echo "" >> RELEASE_NOTES.md
                  echo "### ✨ Features" >> RELEASE_NOTES.md
                  echo "- Enhanced protocol probing with intelligent service detection" >> RELEASE_NOTES.md
                  echo "- Ping sweep functionality for efficient network scanning" >> RELEASE_NOTES.md
                  echo "- Parallel host scanning with configurable concurrency" >> RELEASE_NOTES.md
                  echo "- IP-grouped Markdown reports for better readability" >> RELEASE_NOTES.md
                  echo "- Support for multiple export formats (JSON, CSV, Markdown)" >> RELEASE_NOTES.md
                  echo "" >> RELEASE_NOTES.md
                  echo "### 🔧 Improvements" >> RELEASE_NOTES.md
                  echo "- Cross-platform compatibility (Windows, macOS, Linux)" >> RELEASE_NOTES.md
                  echo "- Optimized performance with async/await architecture" >> RELEASE_NOTES.md
                  echo "- Comprehensive service detection for major protocols" >> RELEASE_NOTES.md
                  echo "" >> RELEASE_NOTES.md
                  echo "### 📦 Binaries" >> RELEASE_NOTES.md
                  echo "Download the appropriate binary for your platform below." >> RELEASE_NOTES.md

            - name: 🏷️ Create Release
              uses: softprops/action-gh-release@v1
              with:
                  name: 'NullScan ${{ github.ref_name }}'
                  body_path: RELEASE_NOTES.md
                  draft: false
                  prerelease: ${{ contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') }}
                  files: |
                      nullscan-linux-x86_64/nullscan
                      nullscan-linux-x86_64-musl/nullscan
                      nullscan-windows-x86_64.exe/nullscan.exe
                      nullscan-macos-x86_64/nullscan
                      nullscan-macos-aarch64/nullscan
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    # 📊 Benchmark Performance
    benchmark:
        name: Performance Benchmarks
        runs-on: ubuntu-latest
        if: github.event_name == 'pull_request'
        steps:
            - name: 📂 Checkout code
              uses: actions/checkout@v4

            - name: 🦀 Setup Rust
              uses: dtolnay/rust-toolchain@stable

            - name: 📦 Cache dependencies
              uses: Swatinem/rust-cache@v2

            - name: 🏗️ Build release
              run: cargo build --release

            - name: ⚡ Run benchmarks
              run: |
                  echo "## 🚀 Performance Benchmarks" > benchmark_results.md
                  echo "" >> benchmark_results.md
                  echo "### Test Results:" >> benchmark_results.md
                  echo "\`\`\`" >> benchmark_results.md

                  # Benchmark localhost scan
                  echo "=== Localhost Top 100 Ports ===" >> benchmark_results.md
                  time ./target/release/nullscan --target 127.0.0.1 --top100 2>&1 | tail -1 >> benchmark_results.md

                  # Benchmark with ping sweep
                  echo "=== Small Network with Ping Sweep ===" >> benchmark_results.md
                  time ./target/release/nullscan --target 127.0.0.0/30 --ping-sweep --ports 80,443 2>&1 | tail -1 >> benchmark_results.md

                  echo "\`\`\`" >> benchmark_results.md

            - name: 📊 Comment benchmark results
              uses: actions/github-script@v6
              with:
                  script: |
                      const fs = require('fs');
                      const results = fs.readFileSync('benchmark_results.md', 'utf8');
                      github.rest.issues.createComment({
                        issue_number: context.issue.number,
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        body: results
                      });

    # 🧹 Maintenance Jobs
    maintenance:
        name: Maintenance
        runs-on: ubuntu-latest
        if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
        steps:
            - name: 📂 Checkout code
              uses: actions/checkout@v4

            - name: 🦀 Setup Rust
              uses: dtolnay/rust-toolchain@stable

            - name: 📦 Update dependencies
              run: cargo update

            - name: 🔍 Check for outdated dependencies
              run: |
                  cargo install cargo-outdated
                  cargo outdated

            - name: 🛡️ Security audit
              run: |
                  cargo install cargo-audit
                  cargo audit
